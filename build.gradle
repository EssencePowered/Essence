plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'com.github.hierynomus.license' version '0.12.1'
    id 'ninja.miserable.blossom' version '1.0.1'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id "com.qixalite.spongestart" version "1.4.3"
}

ext.spongeapi = '5.1.0-SNAPSHOT'
description = 'The Ultimate Essentials Plugin.'
ext.url = 'http://nucleuspowered.org'

group 'io.github.nucleuspowered'
version '0.19.0-5.0-SNAPSHOT'

def mixinversion = '0.15.0-5.0'
def qsmlDep = "uk.co.drnaylor:quickstart-moduleloader:0.4.2"
def geoIpDep = 'com.maxmind.geoip2:geoip2:2.8.0'
def mixinDep = "io.github.nucleuspowered:NucleusMixins:" + mixinversion

defaultTasks 'licenseFormat build'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven {
        name 'Sponge maven repo'
        url 'http://repo.spongepowered.org/maven'
    }
    maven {
        name 'drnaylor-minecraft'
        url 'http://repo.drnaylor.co.uk/artifactory/list/minecraft'
    }
    maven {
        name 'drnaylor'
        url 'http://repo.drnaylor.co.uk/artifactory/list/quickstart'
    }
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    compile "org.spongepowered:spongeapi:5.0.0"
    compile qsmlDep
    compile(mixinDep) {
        exclude module: 'mixin'
        exclude module: 'launchwrapper'
        exclude module: 'guava'
    }

    compile "com.github.hsyyid:EssentialCmds:v8.1.7"

    // For Geo IP
    compile geoIpDep

    // For Scheduled
    compile "com.cronutils:cron-utils:5.0.5"

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile "org.powermock:powermock-module-junit4:1.6.4"
    testCompile "org.powermock:powermock-api-mockito:1.6.4"
}

license {
    ext.name = project.name

    exclude "**/*.info"
    exclude "assets/**"
    exclude "*.properties"
    exclude "*.txt"

    header file('HEADER.txt')
    sourceSets = project.sourceSets

    ignoreFailures false
    strictCheck true

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

spongestart{
    eula true
}

test {
    testLogging {
        showStandardStreams = true
    }
}

blossom {
    def location = 'src/main/java/io/github/nucleuspowered/nucleus/PluginInfo.java'

    replaceToken '@name@', project.name, location
    replaceToken '@version@', project.version, location
    replaceToken '@gitHash@', getGitHash(), location

    replaceToken '@description@', project.description, location
    replaceToken '@url@', project.url, location
    replaceToken '@mixinversion@', mixinversion, location
}

jar {
    manifest {
        attributes  'Implementation-Title': project.name,
                'Implementation-Version': version,
                'SpongeAPI-Version': project.spongeapi,
                'Git-Hash': getGitHash()
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def private String getGitHash() {
    def process = 'git rev-parse --short HEAD'.execute();
    process.waitFor();
    return process.exitValue() ? 'unknown' : process.text.trim();
}

shadowJar {
    dependencies {
        include(dependency(qsmlDep))
        include(dependency(geoIpDep))
        include(dependency("com.maxmind.db:maxmind-db"))
        include(dependency("com.fasterxml.jackson.core:jackson-core"))
        include(dependency("com.fasterxml.jackson.core:jackson-databind"))
        include(dependency("com.fasterxml.jackson.core:jackson-annotations"))
        include(dependency("com.cronutils:cron-utils"))
    }

    relocate 'com.maxmind.geoip2', 'io.github.nucleuspowered.relocate.com.maxmind.geoip2'
    relocate 'com.maxmind.db', 'io.github.nucleuspowered.relocate.com.maxmind.db'
    relocate 'com.fasterxml.jackson', 'io.github.nucleuspowered.relocate.com.fasterxml.jackson'
    relocate 'com.cronutils', 'io.github.nucleuspowered.relocate.com.cronutils'
}
build.dependsOn(shadowJar)
