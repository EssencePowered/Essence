/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability;

import com.google.common.collect.Lists;
import io.github.nucleuspowered.nucleus.api.service.NucleusInvulnerabilityService;
import io.github.nucleuspowered.nucleus.dataservices.modular.ModularUserService;
import io.github.nucleuspowered.nucleus.internal.qsml.module.ConfigurableModule;
import io.github.nucleuspowered.nucleus.modules.invulnerability.commands.GodCommand;
import io.github.nucleuspowered.nucleus.modules.invulnerability.config.InvulnerabilityConfigAdapter;
import io.github.nucleuspowered.nucleus.modules.invulnerability.datamodules.InvulnerabilityUserDataModule;
import io.github.nucleuspowered.nucleus.modules.invulnerability.handlers.InvulnerabilityService;
import org.spongepowered.api.Sponge;
import org.spongepowered.api.service.permission.PermissionService;
import uk.co.drnaylor.quickstart.annotations.ModuleData;

import java.util.Optional;

@ModuleData(id = InvulnerabilityModule.ID, name = "Invulnerability")
public class InvulnerabilityModule extends ConfigurableModule<InvulnerabilityConfigAdapter> {

    public static final String ID = "invulnerability";

    @Override
    public InvulnerabilityConfigAdapter createAdapter() {
        return new InvulnerabilityConfigAdapter();
    }

    @Override
    protected void performPreTasks() throws Exception {
        super.performPreTasks();
        final InvulnerabilityService service = new InvulnerabilityService();
        register(NucleusInvulnerabilityService.class, InvulnerabilityService.class, service);
        Sponge.getServiceManager().provide(PermissionService.class).ifPresent(x -> x.registerContextCalculator(service));

        createSeenModule(GodCommand.class, GodCommand.OTHER_SUFFIX, (cs, user) -> {
            boolean godMode = service.isInvulnerable(user);
            return Lists.newArrayList(
                    plugin.getMessageProvider().getTextMessageWithFormat("seen.godmode",
                            plugin.getMessageProvider().getMessageWithFormat("standard.yesno." + Boolean.toString(godMode).toLowerCase())));
        });
    }
}
