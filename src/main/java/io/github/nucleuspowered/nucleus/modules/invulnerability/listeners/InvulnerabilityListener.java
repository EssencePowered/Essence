/*
 * This file is part of Nucleus, licensed under the MIT License (MIT). See the LICENSE.txt file
 * at the root of this project for more details.
 */
package io.github.nucleuspowered.nucleus.modules.invulnerability.listeners;

import io.github.nucleuspowered.nucleus.internal.ListenerBase;
import io.github.nucleuspowered.nucleus.modules.invulnerability.handlers.InvulnerabilityService;
import org.spongepowered.api.data.key.Keys;
import org.spongepowered.api.entity.Entity;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.entity.DamageEntityEvent;
import org.spongepowered.api.event.entity.ai.SetAITargetEvent;
import org.spongepowered.api.event.filter.Getter;
import org.spongepowered.api.event.network.ClientConnectionEvent;

public class InvulnerabilityListener extends ListenerBase {

    private final InvulnerabilityService service = getServiceUnchecked(InvulnerabilityService.class);

    @Listener
    public void onSetAITargetEvent(SetAITargetEvent event, @Getter("getTarget") Entity entity) {
        if (entity instanceof Player && this.service.isInvulnerable((Player) entity)) {
            event.setCancelled(true); // cancel the change
        }
    }

    @Listener
    public void onPlayerStruck(DamageEntityEvent event, @Getter("getTargetEntity") Player pl) {
        if (this.service.isInvulnerable(pl)) {
            pl.offer(Keys.FIRE_TICKS, 0);
            event.setBaseDamage(0);
            event.setCancelled(true);
        }
    }

    @Listener
    public void onPlayerQuit(ClientConnectionEvent.Disconnect event) {
        this.service.removeFromCache(event.getTargetEntity().getUniqueId());
    }
}
